#!/usr/bin/env python
# -*- coding:utf-8 -*-
# Author: Hongyang Huang
# This script is written for conveniently check the state of executing jobs.
# type 'qpeek' to check the newest job state.
# type 'qpeek xxx' to check all specified job with 'xxx' as part of its job_id.
import os
import re
import sys

# Define a function to verify if the input argument is a number.
def isNum(n):
    try:
        n = type(eval(n))
        if n == type(1):
            return True
        elif n == type(1.0):
            return True
        elif n == type(1+1j):
            return True
        else:
            return False
    except:
        return False
#

# Define a function to return the linenumber of certain file.
def getLineNum(filename):
    count = 0
    fh = open(filename, 'r')
    for index, line in enumerate(fh):
        count += 1
    fh.close()
    return count
#

# Define a function to parse the full job-ID for certain partial input argument.
def refCode(code_num, res_lines):
    for i in res_lines[1:len(res_lines):1]:
        full_code = re.search(r'\s+(\d+).*',i).group(1)
        if str(code_num) == str(full_code)[-len(str(code_num)):]:
            return full_code
    print("[refCode]: No matched job found.\n")
    sys.exit(1)
#

# Define a function to parse full job-ID with no input argument.
def refCode_no(res_lines):
    if len(res_lines) > 1:
        code_num = re.search(r'\s+(\d+).*',res_lines[-1]).group(1)
        return code_num
    else:
        print("[refCode_no]: There are no executing jobs in the queue.\n")
        sys.exit(1)
#

## Define a function to search the work path for certain job.
#def parDir(code_num, homedir):
#    file_name = ["slurm-%s.out" % code_num, "out.%s" % code_num]
#    exit_f = False
#    for i in file_name:
#        res = os.popen("find %s -name %s" % (homedir, i)).read().splitlines()
#        if res:
#            exit_f = True
#            break
#    if not exit_f:
#        print("[parDir]: Job logfile is absent!\n")
#        sys.exit(0)
#    return [os.path.split(res[i])[0] for i in range(len(res))]
##

# Define a function to search the work path for certain job.
def parDir(code_num):
    res = os.popen('scontrol show jobid -dd %s' % code_num).read().splitlines()
    for i in res:
        if 'WorkDir' in i:
            tmp = re.search(r'^\s+WorkDir=(\S+)', i).group(1)
            return tmp
    print('[parDir]: Could not parse the work directory!')
    sys.exit(1)

# Define a function to parse the screen file name.
def parScreen(direc, code_num):
    file_name = os.path.join(direc, "Counts")
    for i in open(file_name, 'r').readlines():  # In the newest version, both the screen numbers and job ids were recorded in the 'Counts' file, so that the correct screen file could be referred if there were multiple jobs executed in the same directory. And this block is used to search for the correct screen number for a specified job id.
        if str(code_num) in i:
            res = i.split()[0]
    if not ('res' in locals()): # This block is written to be compatible to 'Counts' file generated by the old version.
        res = os.popen("tail -1 %s" % file_name).read().replace('/n','')
    try:
        inum = int(res)
    except:
        print("[parScreen]: Wrong 'Counts' file!")
        sys.exit(1)
    else:
        file_name = os.path.join(direc, "%s.screen" % str(inum))
        if not os.path.isfile(file_name):   # For serial jobs which run SMMSAT tool, the name of the screen file is $n.smmsat
            file_name = os.path.join(direc, '%s.smmsat' % str(inum))
        return file_name
#

# Define a function to display the Screen file.
def screen_display(screen_name, continuous_f):
    if not continuous_f:
        nline = getLineNum(screen_name)
        if nline <= 1000:
            os.system("cat %s" % screen_name)
        else:
            os.system("head -n 500 %s" % screen_name)
            print("\n*********************************************************")
            print("*                                                       *")
            print("* Middle lines hidden, displaying the last 500 lines... *")
            print("*                                                       *")
            print("*********************************************************\n")
            os.system("tail -n 500 %s" % screen_name)
    else:
        nline = getLineNum(screen_name)
        if nline <= 1000:
            os.system("tail -n %d -f %s" % (nline, screen_name))
        else:
            os.system("head -n 500 %s" % screen_name)
            print("\n*********************************************************")
            print("*                                                       *")
            print("* Middle lines hidden, displaying the last 500 lines... *")
            print("*                                                       *")
            print("*********************************************************\n")
            os.system("tail -n 500 -f %s" % screen_name)
    return 0
#

# Main script.
if __name__ == '__main__':
    res = os.popen('squeue -u hhuang').read()   # Get the job list.
    # Determine the full job-id and continuous flag depending on the input arguments.
    if len(res) < 2:
        print("There are no executing jobs in the queue.\n")
        sys.exit(1)
    res_lines = res.splitlines()
    continuous_f = False
    if len(sys.argv) > 2:
        if sys.argv[1] == '-f':
            continuous_f = True
        else:
            print('[__main__]: Wring input arguments!\n')
            sys.exit(1)
        code_num = sys.argv[2]
        if isNum(code_num):
            code_num = refCode(code_num, res_lines)
        else:
            print('[__main__]: Wrong input arguments!\n')
            sys.exit(1)
    elif len(sys.argv) > 1:
        code_num = sys.argv[1]
        if isNum(code_num):
            code_num = refCode(code_num, res_lines)
        elif code_num == '-f':
            continuous_f = True
            code_num = refCode_no(res_lines)
        else:
            print('[__main__]: Wrong input arguments!\n')
            sys.exit(1)
    else:
        code_num = refCode_no(res_lines)
    #
    direc = parDir(code_num)    # Parse the work directory of certain job.
    screen_name = parScreen(direc, code_num)  # Parse the name of the corresponding screen file.
    screen_display(screen_name, continuous_f)   # Display the contents of this screen file selectively and continuously if chosen.
    sys.exit(0)
